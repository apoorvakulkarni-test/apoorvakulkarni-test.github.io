{"version":3,"sources":["assets/images/tiles-mural.png","assets/images/tile-ufb.jpg","assets/images/tile-moonboat.png","assets/images/tiles-plu.png","assets/images/tile-comic.png","assets/images/tile-werth.png","assets/images/logo.png","config.js","components/NavBar/index.js","components/Header/index.js","components/Work/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","allTiles","pic","moonboatTile","text","ufbTile","muralTile","pluTile","comicTile","werthTile","navBarItems","id","link","name","NavBarContainer","styled","div","NavBarLink","Link","props","active","NavBar","state","selected","newSelected","this","setState","changeRoute","window","location","pathname","slice","map","item","to","onClick","Component","LogoContainer","img","HeaderContainer","Header","src","LogoPicture","alt","ImageContainer","ImageOverLay","ImageOverLayText","p","ImageBox","Image","Work","workTiles","each","BodyContainer","App","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,qUCM9BC,EAAW,CACvB,CAAEC,IAAKC,IAAcC,KAAM,iBAC3B,CAAEF,IAAKG,IAASD,KAAM,YACtB,CAAEF,IAAKI,IAAWF,KAAM,SACxB,CAAEF,IAAKK,IAASH,KAAM,WACtB,CAAEF,IAAKM,IAAWJ,KAAM,SACxB,CAAEF,IAAKO,IAAWL,KAAM,UAEZM,EAAc,CAC1B,CAAEC,GAAI,GAAIC,KAAK,IAAMC,KAAK,QAC1B,CAAEF,GAAI,OAAQC,KAAK,QAASC,KAAK,QACjC,CAAEF,GAAI,SAAUC,KAAK,UAAWC,KAAK,UACrC,CAAEF,GAAG,UAAWC,KAAK,WAAYC,KAAK,Y,+WCdvC,IAAMC,EAAkBC,IAAOC,IAAV,KAIfC,EAAaF,YAAOG,IAAPH,CAAH,IAEI,SAAAI,GAAK,OAAIA,EAAMC,OAAS,YAAc,SAiC3CC,E,2MArBdC,MAAQ,CACPC,SAAU,I,2EAECC,GACXC,KAAKC,SAAS,CACbH,SAAUC,M,0CAIXC,KAAKE,YAAYC,OAAOC,SAASC,SAASC,MAAM,M,+BAEtC,IAAD,OACT,OACC,kBAACjB,EAAD,KACEJ,EAAYsB,IAAK,SAAAC,GAAI,OAAI,kBAAChB,EAAD,CAAYG,OAAQ,EAAKE,MAAMC,WAAaU,EAAKtB,GAAIuB,GAAID,EAAKrB,KAAMuB,QAAS,kBAAM,EAAKR,YAAYM,EAAKtB,MAAMsB,EAAKpB,a,GAf7HuB,a,sTCjBrB,IAAMC,EAAgBtB,IAAOuB,IAAV,KAIbC,EAAkBxB,IAAOC,IAAV,KAeNwB,EARA,WACd,OACC,kBAACD,EAAD,KACC,kBAACF,EAAD,CAAeI,IAAKC,IAAaC,IAAI,SACrC,kBAAC,EAAD,Q,s2BChBH,IAAMC,EAAiB7B,IAAOC,IAAV,KAQd6B,EAAe9B,IAAOC,IAAV,KAgBZ8B,EAAmB/B,IAAOgC,EAAV,KAKhBC,EAAWjC,IAAOC,IAAV,KAORiC,EAAQlC,IAAOuB,IAAV,KAkBIY,EAbF,WACZ,IAAMC,EAAYlD,EAAS+B,IAAI,SAAAoB,GAAI,OAClC,kBAACJ,EAAD,KACC,kBAACC,EAAD,CAAOR,IAAKW,EAAKlD,IAAKyC,IAAKS,EAAKhD,OAChC,kBAACyC,EAAD,KAAc,kBAACC,EAAD,KAAmBM,EAAKhD,UAGxC,OACC,kBAACwC,EAAD,KACEO,I,+FC7CJ,IAAME,GAAgBtC,IAAOC,IAAV,KAeJsC,OAXf,WACE,OACE,kBAACD,GAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,QAAQC,UAAWN,OCLnBO,QACW,cAA7B7B,OAAOC,SAAS6B,UAEe,UAA7B9B,OAAOC,SAAS6B,UAEhB9B,OAAOC,SAAS6B,SAASC,MACvB,2DCXNC,IAASC,OACT,kBAAC,IAAD,KACC,kBAAC,GAAD,OAECC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f32d5fbc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tiles-mural.5afe55b5.png\";","module.exports = __webpack_public_path__ + \"static/media/tile-ufb.7ff96b9a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tile-moonboat.56fc4bb9.png\";","module.exports = __webpack_public_path__ + \"static/media/tiles-plu.4f3d86dd.png\";","module.exports = __webpack_public_path__ + \"static/media/tile-comic.8450d192.png\";","module.exports = __webpack_public_path__ + \"static/media/tile-werth.d8b938d7.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.9e9720b4.png\";","import muralTile from './assets/images/tiles-mural.png'\nimport ufbTile from './assets/images/tile-ufb.jpg'\nimport moonboatTile from './assets/images/tile-moonboat.png'\nimport pluTile from './assets/images/tiles-plu.png'\nimport comicTile from './assets/images/tile-comic.png'\nimport werthTile from './assets/images/tile-werth.png'\nexport const allTiles = [\n { pic: moonboatTile, text: 'ILLUSTRATIONS' },\n { pic: ufbTile, text: 'GRAPHICS' },\n { pic: muralTile, text: 'MURAL' },\n { pic: pluTile, text: 'PARK UP' },\n { pic: comicTile, text: 'COMIC' },\n { pic: werthTile, text: 'LOGOS' } ]\n\nexport const navBarItems = [\n { id: \"\", link:\"/\" , name:\"HOME\"},\n { id: \"work\", link:\"/work\", name:\"WORK\"},\n { id: \"resume\", link:\"/resume\", name:\"RESUME\"},\n { id:\"contact\", link:\"/contact\", name:\"CONTACT\"}\n]\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { navBarItems } from '../../config'\nimport { Link } from 'react-router-dom'\nconst NavBarContainer = styled.div`\n display: flex;\n flex-direction: row;\n`\nconst NavBarLink = styled(Link)`\n font-family: JosefinRegular;\n text-decoration: ${props => props.active ? 'underline' : 'none' }\n color: black;\n margin: 0 1em 1em 1em;\n &:hover {\n  text-decoration: underline;\n }\n &:visited {\n  color: black;\n }\n`\n\nclass NavBar extends Component {\n state = {\n  selected: \"\"\n }\n changeRoute(newSelected) {\n  this.setState({\n   selected: newSelected\n  })\n }\n componentDidMount() {\n  this.changeRoute(window.location.pathname.slice(1))\n }\n render () {\n  return (\n   <NavBarContainer>\n    {navBarItems.map( item => <NavBarLink active={this.state.selected === item.id} to={item.link} onClick={() => this.changeRoute(item.id)}>{item.name}</NavBarLink>)}\n   </NavBarContainer>\n  ) \n }\n}\n\n\nexport default NavBar","import React from 'react'\nimport styled from 'styled-components'\nimport NavBar from '../NavBar'\nimport LogoPicture from '../../assets/images/logo.png'\nconst LogoContainer = styled.img`\n object-fit: contain;\n width: 80px;\n`\nconst HeaderContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\nconst Header = () => {\n return (\n  <HeaderContainer>\n   <LogoContainer src={LogoPicture} alt=\"logo\" />\n   <NavBar />\n  </HeaderContainer>\n )\n}\nexport default Header","import React from 'react'\nimport { allTiles} from '../../config'\nimport styled from 'styled-components'\nconst ImageContainer = styled.div`\n display: flex;\n justify-content: center;\n flex-wrap: wrap;\n width: 100%;\n\n\n`\nconst ImageOverLay = styled.div`\n position: absolute;\n background-color: rgba(255,255,255,0.6);\n z-index: 2;\n width: 100%;\n height: 100%;\n opacity: 0;\n top: 0;\n left: 0;\n display: flex;\n justify-content: center;\n align-items: center;\n &:hover {\n  opacity: 1;\n }\n`\nconst ImageOverLayText = styled.p`\n font-family: JosefinLight;\n font-size: 50px;\n\n`\nconst ImageBox = styled.div`\n flex: 1 1 50%;\n box-sizing: border-box;\n padding: 0.5em;\n min-width: 25em;\n position: relative;\n`\nconst Image = styled.img`\n width: 100%;\n object-fit: contain;\n`\n\nconst Work = () => {\n const workTiles = allTiles.map(each => \n  <ImageBox>\n   <Image src={each.pic} alt={each.text} />\n   <ImageOverLay><ImageOverLayText>{each.text}</ImageOverLayText></ImageOverLay>\n  </ImageBox>\n   )\n return (\n  <ImageContainer>\n   {workTiles}\n  </ImageContainer>  \n )\n}\nexport default Work","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport styled from 'styled-components'\nimport Header from './components/Header'\nimport Work from './components/Work'\nimport './App.css'\n\n\nconst BodyContainer = styled.div`\n  margin: 0 3em;\n`\n\nfunction App() {\n  return (\n    <BodyContainer>\n      <Header />\n      <Switch>\n        <Route path=\"/work\" component={Work} />\n      </Switch>\n    </BodyContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<BrowserRouter>\n <App />\n</BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}